#!/usr/bin/env python3

import argparse
import sys
from random import SystemRandom

ALLOWED_DIFFICULTIES = [
    'easy',
    'medium',
    'hard'
]

config = None


class Config():
    """The configuration for a password."""

    def __init__(self, difficulty=None, upper_count=None, lower_count=None, num_count=None,
                 special_count=None, toggle_hand=None, allow_doubles=None, allow_zeroes=None):
        if difficulty == None:
            self.upper_count = 0
            self.lower_count = 0
            self.num_count = 0
            self.special_count = 0
            self.toggle_hand = False
            self.allow_doubles = False
            self.allow_zeroes = True
        elif difficulty == 'easy':
            self.upper_count = 2
            self.lower_count = 4
            self.num_count = 2
            self.special_count = 0
            self.toggle_hand = True
            self.allow_doubles = False
            self.allow_zeroes = True
        elif difficulty == 'medium':
            self.upper_count = 4
            self.lower_count = 8
            self.num_count = 4
            self.special_count = 0
            self.toggle_hand = False
            self.allow_doubles = False
            self.allow_zeroes = True
        elif difficulty == 'hard':
            self.upper_count = 8
            self.lower_count = 12
            self.num_count = 8
            self.special_count = 4
            self.toggle_hand = False
            self.allow_doubles = False
            self.allow_zeroes = True
        elif difficulty != None:
            print(f'Unable to parse difficulty. Allowed difficulties: {ALLOWED_DIFFICULTIES}')
            sys.exit(1)

        if type(upper_count) == int:
            self.upper_count = upper_count
        if type(lower_count) == int:
            self.lower_count = lower_count
        if type(num_count) == int:
            self.num_count = num_count
        if type(special_count) == int:
            self.special_count = special_count
        if type(toggle_hand) == bool:
            self.toggle_hand = toggle_hand
        if type(allow_doubles) == bool:
            self.allow_doubles = allow_doubles
        if type(allow_zeroes) == bool:
            self.allow_zeroes = allow_zeroes

    def __str__(self):
        return ('upper_count={} '
                'lower_count={} '
                'num_count={} '
                'special_count={} '
                'toggle_hand={} '
                'allow_doubles={} '
                'allow_zeroes={}'.format(
                    self.upper_count,
                    self.lower_count,
                    self.num_count,
                    self.special_count,
                    self.toggle_hand,
                    self.allow_doubles,
                    self.allow_zeroes))


class Char():
    """The base class for an object representation of the different types of
       items that may be combined to form a password."""

    random = SystemRandom()
    previous_char = None
    left = random.random() > .5

    def get_next(self):
        """Get the next manifestation of this type of password item.

        Returns:
            The next manifestation of this type of password item.
        """

        next_char = None

        while True:
            if config.toggle_hand:
                if Char.left:
                    next_char = self._get_left()
                else:
                    next_char = self._get_right()
            else:
                if Char.random.random() > .5:
                    next_char = self._get_left()
                else:
                    next_char = self._get_right()
            if next_char == '0' and not config.allow_zeroes:
                continue
            if next_char is not Char.previous_char or config.allow_doubles:
                break

        Char.previous_char = next_char
        Char.left = not Char.left

        return next_char

    def _get_left(self):
        return Char.random.choice(self.left_list)

    def _get_right(self):
        return Char.random.choice(self.right_list)

    def __str__(self):
        return self.get_next()


class Upper(Char):
    """The upper case letter type."""

    def __init__(self):
        self.left_list = ['Q', 'W', 'E', 'R', 'T', 'A', 'S', 'D', 'F', 'G', 'Z', 'X', 'C', 'V']
        self.right_list = ['Y', 'U', 'I', 'O', 'P', 'H', 'J', 'K', 'L', 'B', 'N', 'M']


class Lower(Char):
    """The lower case letter type."""

    def __init__(self):
        self.left_list = ['q', 'w', 'e', 'r', 't', 'a', 's', 'd', 'f', 'g', 'z', 'x', 'c', 'v']
        self.right_list = ['y', 'u', 'i', 'o', 'p', 'h', 'j', 'k', 'l', 'b', 'n', 'm']


class Num(Char):
    """The number type."""

    def __init__(self):
        self.left_list = ['1', '2', '3', '4', '5']
        self.right_list = ['6', '7', '8', '9', '0']


class Special(Char):
    """The special character type."""

    def __init__(self):
        self.left_list = ['!', '@', '#', '$', '%']
        self.right_list = ['^', '&', '*', '(', ')']


def generate_password():
    """Generate a password using the specified config.

    Returns:
        A complete password in string format.
    """

    password_types = []
    for i in range(0, config.upper_count):
        password_types.append(Upper())
    for i in range(0, config.lower_count):
        password_types.append(Lower())
    for i in range(0, config.num_count):
        password_types.append(Num())
    for i in range(0, config.special_count):
        password_types.append(Special())
    SystemRandom().shuffle(password_types)

    password = []
    for i in password_types:
        password.append(str(i))

    return ''.join(password)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('difficulty', nargs='?', default=None)
    parser.add_argument('--upper', type=int, default=None)
    parser.add_argument('--lower', type=int, default=None)
    parser.add_argument('--num', type=int, default=None)
    parser.add_argument('--special', type=int, default=None)
    parser.add_argument('--toggle', action='store_true')
    parser.add_argument('--duplicates', action='store_true')
    parser.add_argument('--no-zeroes', action='store_true')
    return parser.parse_args()


def main():
    args = parse_args()

    if args.difficulty == None and len(sys.argv) == 1:
        args.difficulty = 'medium'

    global config
    config = Config(difficulty=args.difficulty,
                    upper_count=args.upper,
                    lower_count=args.lower,
                    num_count=args.num,
                    special_count=args.special,
                    toggle_hand=args.toggle,
                    allow_doubles=args.duplicates,
                    allow_zeroes=not args.no_zeroes)

    sys.stderr.write('{}\n'.format(config))
    print(generate_password())


if __name__ == '__main__':
    main()
